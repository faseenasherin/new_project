{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP6Tazj01fVTgJ3JoeOAOay"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yviz7MVvkhFc","executionInfo":{"status":"ok","timestamp":1751484057598,"user_tz":-330,"elapsed":1656,"user":{"displayName":"faseenaa","userId":"10026326543215811363"}},"outputId":"cab2a2ec-91e6-44fb-9443-c337609ba4ae"},"outputs":[{"output_type":"stream","name":"stdout","text":["Reshaped Matrix:\n"," [[10 11 12 13 14 15 16 17 18 19]\n"," [20 21 22 23 24 25 26 27 28 29]\n"," [30 31 32 33 34 35 36 37 38 39]\n"," [40 41 42 43 44 45 46 47 48 49]]\n","\n","Last Column:\n"," [19 29 39 49]\n"]}],"source":["#Q1\n","import numpy as np\n","arr = np.arange(10, 50)\n","reshaped_arr = arr.reshape(4, 10)\n","last_column = reshaped_arr[:, -1]\n","print(\"Reshaped Matrix:\\n\", reshaped_arr)\n","print(\"\\nLast Column:\\n\", last_column)"]},{"cell_type":"code","source":["#Q2\n","import numpy as np\n","\n","matrix_5s = np.full((3, 3), 5)\n","matrix_1_to_9 = np.arange(1, 10).reshape(3, 3)\n","sum_matrix = matrix_5s + matrix_1_to_9\n","product_matrix = matrix_5s * matrix_1_to_9\n","transpose_product = product_matrix.T\n","print(\"Matrix of 5s:\\n\", matrix_5s)\n","print(\"\\nMatrix 1 to 9:\\n\", matrix_1_to_9)\n","print(\"\\nSum:\\n\", sum_matrix)\n","print(\"\\nElement-wise Product:\\n\", product_matrix)\n","print(\"\\nTranspose of Product:\\n\", transpose_product)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WBydb80mlXH9","executionInfo":{"status":"ok","timestamp":1751484106531,"user_tz":-330,"elapsed":9,"user":{"displayName":"faseenaa","userId":"10026326543215811363"}},"outputId":"34d8d27b-d8c9-45c8-8541-1eaaf126a45a"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Matrix of 5s:\n"," [[5 5 5]\n"," [5 5 5]\n"," [5 5 5]]\n","\n","Matrix 1 to 9:\n"," [[1 2 3]\n"," [4 5 6]\n"," [7 8 9]]\n","\n","Sum:\n"," [[ 6  7  8]\n"," [ 9 10 11]\n"," [12 13 14]]\n","\n","Element-wise Product:\n"," [[ 5 10 15]\n"," [20 25 30]\n"," [35 40 45]]\n","\n","Transpose of Product:\n"," [[ 5 20 35]\n"," [10 25 40]\n"," [15 30 45]]\n"]}]},{"cell_type":"code","source":["#Q3\n","import numpy as np\n","arr = np.random.randint(10, 101, size=15)\n","replaced_arr = arr.copy()\n","replaced_arr[replaced_arr > 50] = -1\n","count_replaced = np.sum(arr > 50)\n","print(\"Original Array:\\n\", arr)\n","print(\"\\nModified Array:\\n\", replaced_arr)\n","print(\"\\nNumber of values replaced:\", count_replaced)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mQ3PcVQjln4V","executionInfo":{"status":"ok","timestamp":1751484189098,"user_tz":-330,"elapsed":8,"user":{"displayName":"faseenaa","userId":"10026326543215811363"}},"outputId":"374dcb19-d119-4cec-aa98-3579b44b76b2"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Array:\n"," [69 81 17 15 15 88 41 35 65 81 53 37 75 14 69]\n","\n","Modified Array:\n"," [-1 -1 17 15 15 -1 41 35 -1 -1 -1 37 -1 14 -1]\n","\n","Number of values replaced: 8\n"]}]},{"cell_type":"code","source":["#4\n","import numpy as np\n","array = np.random.rand(5, 4)\n","print(\"Original Array:\\n\", array)\n","row_sums = np.sum(array, axis=1)\n","max_row_index = np.argmax(row_sums)\n","print(\"\\nRow with maximum sum is at index:\", max_row_index)\n","print(\"Maximum sum value:\", row_sums[max_row_index])\n","print(\"Row with max sum:\", array[max_row_index])\n","\n","normalized_array = np.zeros_like(array)\n","\n","for i in range(array.shape[0]):\n","    row = array[i]\n","    row_min = np.min(row)\n","    row_max = np.max(row)\n","    normalized_array[i] = (row - row_min) / (row_max - row_min)\n","\n","print(\"\\nNormalized Array:\\n\", normalized_array)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MGOEnlg_l8GM","executionInfo":{"status":"ok","timestamp":1751484246924,"user_tz":-330,"elapsed":9,"user":{"displayName":"faseenaa","userId":"10026326543215811363"}},"outputId":"4204af97-2738-427e-bdee-cc0dc8a58de3"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Array:\n"," [[0.49748892 0.98860695 0.18499737 0.66004197]\n"," [0.60122553 0.46448777 0.28750055 0.56983172]\n"," [0.28697494 0.61913587 0.81840814 0.5193451 ]\n"," [0.93913431 0.77341581 0.9433574  0.36150539]\n"," [0.02598918 0.8240652  0.7693724  0.94891886]]\n","\n","Row with maximum sum is at index: 3\n","Maximum sum value: 3.017412910581606\n","Row with max sum: [0.93913431 0.77341581 0.9433574  0.36150539]\n","\n","Normalized Array:\n"," [[0.38885991 1.         0.         0.59113855]\n"," [1.         0.56414769 0.         0.89993205]\n"," [0.         0.62502858 1.         0.43725188]\n"," [0.99274197 0.70792987 1.         0.        ]\n"," [0.         0.86472028 0.8054603  1.        ]]\n"]}]},{"cell_type":"code","source":["#Q5\n","import numpy as np\n","\n","arr = np.array([1, 3, 5, 3, 7, 9, 1, 5, 5])\n","\n","unique, counts = np.unique(arr, return_counts=True)\n","\n","\n","duplicates = unique[counts > 1]\n","print(\"Duplicate elements:\", duplicates)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YlR265NTmKUH","executionInfo":{"status":"ok","timestamp":1751484281446,"user_tz":-330,"elapsed":11,"user":{"displayName":"faseenaa","userId":"10026326543215811363"}},"outputId":"c0ed513d-bce8-4e08-a76b-3abcfe83a69d"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Duplicate elements: [1 3 5]\n"]}]},{"cell_type":"code","source":["#Q6\n","import numpy as np\n","\n","array = np.arange(1, 37).reshape(6, 6)\n","print(\"Original 6x6 Array:\\n\", array)\n","submatrix_4x4 = array[1:5, 1:5]\n","print(\"\\nMiddle 4x4 Submatrix:\\n\", submatrix_4x4)\n","even_numbers = submatrix_4x4[submatrix_4x4 % 2 == 0]\n","print(\"\\nEven numbers in the submatrix:\\n\", even_numbers)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eAFG3pz4mSlb","executionInfo":{"status":"ok","timestamp":1751484321371,"user_tz":-330,"elapsed":11,"user":{"displayName":"faseenaa","userId":"10026326543215811363"}},"outputId":"d2110266-10b5-459a-962a-7c1b0202b550"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Original 6x6 Array:\n"," [[ 1  2  3  4  5  6]\n"," [ 7  8  9 10 11 12]\n"," [13 14 15 16 17 18]\n"," [19 20 21 22 23 24]\n"," [25 26 27 28 29 30]\n"," [31 32 33 34 35 36]]\n","\n","Middle 4x4 Submatrix:\n"," [[ 8  9 10 11]\n"," [14 15 16 17]\n"," [20 21 22 23]\n"," [26 27 28 29]]\n","\n","Even numbers in the submatrix:\n"," [ 8 10 14 16 20 22 26 28]\n"]}]},{"cell_type":"code","source":["#Q7\n","import numpy as np\n","\n","array = np.arange(12).reshape(3, 4)\n","print(\"Original (3,4) Array:\\n\", array)\n","reshaped_2x6 = array.reshape(2, 6)\n","print(\"\\nReshaped to (2,6):\\n\", reshaped_2x6)\n","flattened = reshaped_2x6.flatten()\n","print(\"\\nFlattened 1D Array:\\n\", flattened)\n","reshaped_4x3 = flattened.reshape(4, 3)\n","print(\"\\nReshaped back to (4,3):\\n\", reshaped_4x3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ejecRwj5mcX9","executionInfo":{"status":"ok","timestamp":1751484367759,"user_tz":-330,"elapsed":9,"user":{"displayName":"faseenaa","userId":"10026326543215811363"}},"outputId":"15f73db7-c116-4d5b-cb67-11534698b00e"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Original (3,4) Array:\n"," [[ 0  1  2  3]\n"," [ 4  5  6  7]\n"," [ 8  9 10 11]]\n","\n","Reshaped to (2,6):\n"," [[ 0  1  2  3  4  5]\n"," [ 6  7  8  9 10 11]]\n","\n","Flattened 1D Array:\n"," [ 0  1  2  3  4  5  6  7  8  9 10 11]\n","\n","Reshaped back to (4,3):\n"," [[ 0  1  2]\n"," [ 3  4  5]\n"," [ 6  7  8]\n"," [ 9 10 11]]\n"]}]},{"cell_type":"code","source":["#Q8\n","import numpy as np\n","\n","a = np.array([[1, 2], [3, 4]])\n","print(\"Original array:\\n\", a)\n","\n","a = np.vstack([a, [5, 6]])\n","print(\"After adding row [5, 6]:\\n\", a)\n","\n","new_col = np.array([[7], [8], [9]])\n","a = np.hstack([a, new_col])\n","print(\"After adding column [7, 8, 9]:\\n\", a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LatGa0PTmn5W","executionInfo":{"status":"ok","timestamp":1751484405722,"user_tz":-330,"elapsed":9,"user":{"displayName":"faseenaa","userId":"10026326543215811363"}},"outputId":"ce0627ad-1a9f-4e6f-c306-58cb54c5c597"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Original array:\n"," [[1 2]\n"," [3 4]]\n","After adding row [5, 6]:\n"," [[1 2]\n"," [3 4]\n"," [5 6]]\n","After adding column [7, 8, 9]:\n"," [[1 2 7]\n"," [3 4 8]\n"," [5 6 9]]\n"]}]},{"cell_type":"code","source":["#Q9\n","import numpy as np\n","\n","a = np.array([1, 2, 3])\n","b = np.array([4, 5, 6])\n","c = np.array([7, 8, 9])\n","\n","combined = np.concatenate([a, b, c])\n","print(\"Combined array:\\n\", combined)\n","\n","\n","matrix = combined.reshape(3, 3)\n","print(\"Reshaped 3x3 matrix:\\n\", matrix)\n","\n","diagonal = np.diag(matrix)\n","print(\"Diagonal elements:\\n\", diagonal)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nm9lFiH7mxE0","executionInfo":{"status":"ok","timestamp":1751484432364,"user_tz":-330,"elapsed":4,"user":{"displayName":"faseenaa","userId":"10026326543215811363"}},"outputId":"08d0999b-f318-42e6-c085-a031fdc8cda6"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Combined array:\n"," [1 2 3 4 5 6 7 8 9]\n","Reshaped 3x3 matrix:\n"," [[1 2 3]\n"," [4 5 6]\n"," [7 8 9]]\n","Diagonal elements:\n"," [1 5 9]\n"]}]},{"cell_type":"code","source":["#Q10\n","import numpy as np\n","arr = np.arange(1, 21)\n","print(\"Original array:\\n\", arr)\n","\n","filtered = arr[(arr % 3 == 0) | (arr % 5 == 0)]\n","print(\"Values divisible by 3 or 5:\\n\", filtered)\n","\n","count = filtered.size\n","print(\"Count of values divisible by 3 or 5:\", count)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3Jp6ji8Hm3Va","executionInfo":{"status":"ok","timestamp":1751484462800,"user_tz":-330,"elapsed":9,"user":{"displayName":"faseenaa","userId":"10026326543215811363"}},"outputId":"f0e39db9-03e8-4748-e787-d6e2b304187a"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Original array:\n"," [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20]\n","Values divisible by 3 or 5:\n"," [ 3  5  6  9 10 12 15 18 20]\n","Count of values divisible by 3 or 5: 9\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"hcrlrcJSm-58"},"execution_count":null,"outputs":[]}]}